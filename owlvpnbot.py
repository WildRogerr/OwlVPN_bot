from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types.input_file import FSInputFile
import asyncio
import logging
from config import TOKEN
from config import ADMIN
from config import LINKSUPPORT
from config import TARIF
from config import PROMOCODE
from config import PROMOTARIF
from asyncio import sleep
import app.keyboards as kb
from app.owlvpnbackend import managebot

bot = Bot(token=TOKEN)
dp = Dispatcher()

async def main():
    await dp.start_polling(bot)

class data:
    messages_to_delete = {}
    user_ids = [ADMIN]#–í—Ä–µ–º–µ–Ω–Ω–æ

@dp.message(Command('start'))
async def start(message: Message):
    with open('./txt/welcome.txt','r',encoding="utf-8") as file:
        welcome = file.read()
    await message.answer(welcome, parse_mode='html', reply_markup=kb.connectkeys)

@dp.message(Command('help'))
async def help(message: Message): 
    with open('./txt/help.txt','r',encoding="utf-8") as file:
        help = file.read()
        await message.answer(help, parse_mode='html')
    
@dp.message(Command('support'))
async def support(message: Message): 
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ —Å–ª—É–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: {LINKSUPPORT}',parse_mode='html')

@dp.message(Command('admin'))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=kb.adminkeyboard)
    else:
        message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@dp.message(Command('broadcast'))
async def broadcast(message: Message):
    if message.from_user.id != ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if len(message.text.split()) < 2:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"')
        return
    
    text = message.text.split(maxsplit=1)[1]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    #cursor.execute("SELECT id FROM users")
    #users = cursor.fetchall()

    successful = 0
    failed = 0

    for user_id in data.user_ids:
        try:
            await bot.send_message(user_id, text)
            successful += 1
            await sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {successful}, –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}.")

@dp.message(F.text == '‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def text_handler1(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer(f'–í–∞—à —Ç–∞—Ä–∏—Ñ:{1} –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª(—ã): {2}')
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == '‚úîÔ∏è –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ')
async def text_handler2(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∞—Ä–∏—Ñ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"',reply_markup=kb.chosetarifkeys)
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == 'üí≥ –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É')
async def text_handler3(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É:", reply_markup=kb.paykey)
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == '‚ùî –ü–æ–º–æ—â—å')
async def text_handler4(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        with open('./txt/help.txt','r',encoding="utf-8") as file:
            help = file.read()
            new_message = await message.answer(help, parse_mode='html')
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == 'üí¨ F.A.Q.')
async def text_handler5(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        with open('./txt/faq.txt','r',encoding="utf-8") as file:
            faq = file.read()
            new_message = await message.answer(faq, parse_mode='html')
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ')
async def text_handler6(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ —Å–ª—É–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: {LINKSUPPORT}',parse_mode='html')
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == PROMOCODE)
async def text_handler7(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:',reply_markup=kb.chosepromotarifkey)
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚ÜóÔ∏è')
async def text_handler8(message: Message):
        await message.delete()
        if message.chat.id in data.messages_to_delete:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=data.messages_to_delete[message.chat.id])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        new_message = await message.answer('–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É "broadcast" —á–µ—Ä–µ–∑ slash –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—ë, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫—É', reply_markup=kb.backbtn)
        data.messages_to_delete[message.chat.id] = new_message.message_id

@dp.message(F.text != ['‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                       '‚úîÔ∏è –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ',
                       'üí≥ –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É',
                       '‚ùî –ü–æ–º–æ—â—å',
                       'üí¨ F.A.Q.',
                       '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',
                       PROMOCODE,
                       '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚ÜóÔ∏è'])
async def text_handler9(message: Message):
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')

@dp.callback_query(F.data == 'startvpn')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('''–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∞—Ä–∏—Ñ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"''', reply_markup=kb.startkeys)
    
@dp.callback_query(F.data == 'mainchat')
async def callback(callback: CallbackQuery):
    await callback.message.delete()

@dp.callback_query(F.data == 'paymessage')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

@dp.callback_query(F.data == 'keyboard')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    startphoto = FSInputFile('./img/startphoto.jpg')
    await bot.send_photo(chat_id=callback.message.chat.id,photo=startphoto)
    with open('./txt/startmessage.txt','r',encoding="utf-8") as file:
            startmessage = file.read()
    await callback.message.answer(startmessage, parse_mode='html', disable_web_page_preview=True, reply_markup=kb.mainkeyboard)

@dp.callback_query(F.data == 'paymessage')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

@dp.callback_query(F.data == 'promocode')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    if callback.message.chat.id in data.messages_to_delete:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=data.messages_to_delete[callback.message.chat.id])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    new_message = await bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:',reply_markup=kb.backbtn)
    data.messages_to_delete[callback.message.chat.id] = new_message.message_id

@dp.callback_query(F.data == 'choosetarif')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(TARIF,reply_markup=kb.tarifkeys)

@dp.callback_query(F.data == 'choosepromotarif')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(PROMOTARIF,reply_markup=kb.promotarifkeys)

@dp.callback_query(F.data == 'changetarif')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(TARIF,reply_markup=kb.changetarifkeys)

@dp.callback_query(F.data == 'changepromotarif')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(PROMOTARIF,reply_markup=kb.chpromotarifkeys)

@dp.callback_query(F.data == 'tarif1')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',reply_markup=kb.paykeys)

@dp.callback_query(F.data == 'tarif2')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',reply_markup=kb.paykeys)

@dp.callback_query(F.data == 'tarif3')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',reply_markup=kb.paykeys)

@dp.callback_query(F.data == 'tarif4')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',reply_markup=kb.paykeys)

@dp.callback_query(F.data == 'tarif5')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã',reply_markup=kb.paykeys)

@dp.callback_query(F.data == 'chtarif1')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É"')

@dp.callback_query(F.data == 'chtarif2')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É"')

@dp.callback_query(F.data == 'chtarif3')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É"')

@dp.callback_query(F.data == 'chtarif4')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É"')

@dp.callback_query(F.data == 'chtarif5')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢–∞—Ä–∏—Ñ –≤—ã–±—Ä–∞–Ω. –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É"')

@dp.callback_query(F.data == 'pay')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"',reply_markup=kb.resumekey)

@dp.callback_query(F.data == 'pay2')
async def callback(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

    
if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')